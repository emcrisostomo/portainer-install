#!/usr/bin/env zsh
# -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (c) 2020 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst
unsetopt bash_rematch

set -o errexit
set -o nounset
set -o pipefail

PROG=${0}
PROGNAME=${0:t}
PROGDIR=${0:h}
BUG_REPORT=@PACKAGE_BUGREPORT@
PACKAGE_VERSION=@PACKAGE_VERSION@

typeset -r PORTAINER_STACK_URL=https://downloads.portainer.io/portainer-agent-stack.yml
typeset -r PORTAINER_STACK_FILE=${TMPDIR}/portainer-agent-stack.yml

# getopts
typeset -a help_flag
typeset -a uninstall_flag
typeset -a verbose_flag
typeset -a version_flag

# Output verbosity and logging
exec 5>/dev/null

function print_verbose()
{
  local log_message=${1:?Log message is required.}

  printf -- "%s\n" ${log_message} 1>&5
}

# cleanup trap
trap '__trap' INT TERM EXIT

function __trap()
{
  local exit_code=$?
  trap - EXIT

  exec 5>&-

  exit ${exit_code}
}

# Program dependencies
typeset -a REQUIRED_PROGS=( curl docker )

function check_required_programs()
{
  for p in ${REQUIRED_PROGS}
  do
    command -v ${p} > /dev/null 2>&1 ||
      {
        >&2 print "Cannot find required program: ${p}"
        exit 1
      }
  done
}

function print_version()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print "Copyright (C) 2020 Enrico M. Crisostomo"
  print "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  print "This is free software: you are free to change and redistribute it."
  print "There is NO WARRANTY, to the extent permitted by law."
  print
  print "Written by Enrico M. Crisostomo"

  exit 0
}

function print_usage()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print
  print "Usage:"
  print "${PROGNAME}"
  print "${PROGNAME} -h"
  print "${PROGNAME} -v"
  print
  print
  print "Options:"
  print " -h, --help       Print this message."
  print " -u, --uninstall  Uninstall portainer"
  print " -v, --verbose    Print verbose output."
  print "     --version    Print the program version."
  print
  print "See the man page for more information."
  print
  print "Report bugs to <https://github.com/emcrisostomo/portainer-install/issues>."
  print "${PROGNAME} home page: <https://github.com/emcrisostomo/portainer-install>."

  exit 0
}

function uninstall_standalone()
{
  docker rm -f portainer
}

function install_standalone()
{
  docker volume create portainer_data
  docker run -d \
    -p 8000:8000 \
    -p 9000:9000 \
    --name=portainer \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data portainer/portainer
}

function uninstall_swarm()
{
  docker stack rm portainer
}

function install_swarm()
{
  curl -L ${PORTAINER_STACK_URL} -o ${TMPDIR}/portainer-agent-stack.yml
  docker stack deploy --compose-file=${PORTAINER_STACK_FILE} portainer
}

function is_swarm()
{
  local IS_SWARM=$(docker info --format '{{.Swarm.LocalNodeState}}')

  if [[ ${IS_SWARM} == "active" ]]
  then
    return 0
  else
    return 1
  fi
}

function install_portainer()
{
  if is_swarm
  then
    install_swarm
  else
    install_standalone
  fi
}

function uninstall_portainer()
{
  if is_swarm
  then
    uninstall_swarm
  else
    uninstall_standalone
  fi
}

function __main()
{
  check_required_programs

  zparseopts -D -E \
             h=help_flag      -help=help_flag           \
             u=uninstall_flag -uninstall=uninstall_flag \
             v=verbose_flag   -verbose=verbose_flag     \
                              -version=version_flag

  (( ${#help_flag} ))    && print_usage
  (( ${#verbose_flag} )) && exec 5>&2
  (( ${#version_flag} )) && print_version

  (( $# == 0 )) ||
  {
    >&2 print "Invalid command."
    return 1
  }

  if (( ${#uninstall_flag} ))
  then
    uninstall_portainer
  else
    install_portainer
  fi
}

# main
__main $*

# Local variables:
# coding: utf-8
# mode: sh
# eval: (sh-set-shell "zsh")
# tab-width: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# sh-indentation: 2
# End:
